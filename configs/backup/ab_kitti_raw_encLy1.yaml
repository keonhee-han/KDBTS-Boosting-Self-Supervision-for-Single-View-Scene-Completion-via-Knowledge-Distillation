defaults:                       ### This code is for concept of proof and transfer its parameters to long run slurm training config
    - default
    - data: kitti_raw_DFT
    - _self_

name: "_encLyer1_slurm"     ## Please name it in case there are various hparam settings to distinguish the diff results easily.
model: "bts"                    # model: "bts"/ "bts_overfit"    # TODO: bts_~~ for debug ## need to modify for debugging for different bts model ## replace en-decoder for trained one
output_path: "out/mvbts/kitti_raw/"

num_epochs: 200
validate_every: 100000                  # default: 50000    , Note: This validation process takes around 6 hours for nvidia RTX A40 48GB
visualize_every: 1000                    # default: 5000       ## bigger is good for computational reduction
batch_size: 4                           # default: 4, and 16 for original BTS      ## Note: size 1 is working properly with NueRay integration. The complete integration needs to be done with super-batch size in training loop. ## each batch contains 8 views 16*8 too much

save_best:
    metric: abs_rel                     # The model that has the smallest absolute relative error will be saved.
    sign: -1                            # The sign is negative, meaning that the model with the smallest abs_rel is the best

## fine-tuning from pretrained BTS model
resume_from: "/storage/user/hank/BehindTheScenes/out/kitti_raw/pretrained/training-checkpoint.pt"

## keep continuing training from breakpoint
# resume_from: "/usr/stud/hank/storage/user/BehindTheScenes/out/mvbts/kitti_360/Smodekitti360-mono_FeT_StTFrF_Fc2_do0.1_dohT_embEncff_dout16_decIBRT_nly4_nh4_readoutTypefixed_lr5e-05_bs1_rbs2048_ztype_z_trainType__slurm_backend-None-1_20231015-213542/training_checkpoint_182000.pt"
# resume_from: "/usr/stud/hank/storage/user/BehindTheScenes/out/mvbts/kitti_360/Smodemono_FeF_StFFrF_Fc3_do0.1_dohT_embEncff_dout16_decIBRT_nly4_nh4_readoutTypefixed_lr5e-05_bs2_rbs2048_ztype_z_trainType__slurm_backend-None-1_20231015-212636/training_checkpoint_168500.pt"

## knowlege distillation (Note: make same configuration from checkpoint)
# resume_from: "/storage/user/muhled/outputs/mvbts/kitti_360/long_training/training_checkpoint_310000.pt"


data:
    data_fc: 2              ## default: 2, and 3 for monocular camera
    image_size: [192, 640]
    color_aug: true
    is_preprocessed: true
    fisheye_rotation: [0, -15]

    ## This is for training inference viz for different training view cases: F, S, FS in BTS paper. No need to change for normal training
    data_fisheye: true
    data_stereo: true       ## load only left

#### below are the same for both eval and training

renderer:
    n_coarse : 64                       # default: 64, num sampling on a ray
    n_fine : 0
    n_fine_depth : 0
    depth_std : 1.0
    sched : []
    white_bkgd : false
    lindisp: true
    hard_alpha_cap: true
    eval_batch_size: 32768 # ==2^15     ##? ## ~/2 /2 /2    ## Note: this is the absolute eval steps without having to worry about the variant evaluations caused by batch epoch

model_conf:
    arch: "MVBTSNet"                    # constructor for class MVBTSNet(torch.nn.Module):
    use_code: true
    prediction_mode: default
    num_multiviews: 2                    # default: 3 for kitti360, number of multi encoded views to aggregate. Possible value: ~(fc*4). Default: 2 Note: cams are render loss
    use_viewdirs: false                  # use with Neuray to aggregate multi-views, set true. c.f. IBRNet, PixelNeRF

    # camera_positional_encoding: true   # positional encoding between available camera's indices

    encoder:
        type: "monodepth2"
        freeze: false                   # freezing en- and decoder network to verify if training the transformer works     // by unfreezing, to train the en- and decoder
        pretrained: true
        resnet_layers: 50
        num_ch_dec: [32,32,64,128,256]
        d_out: 64                       # c.f. paper D.1. output channel dimension 64 as hparam for the best result
        
    code:
        num_freqs: 6
        freq_factor: 1.5
        include_input: true

    decoder_heads:
        - type: "MultiViewHead"
          name: "multiviewhead"
          freeze: false                 # True For knowledge-distillation learning for singleview head
          args:
            embedding_encoder:
                type: "pwf"              ## default: pwf, set embedding type as string: pwf | ff | hpwf : PoswiseFF_emb4enc | FeedForward | FeedForward_half| hardcoded_PoswiseFF_emb4enc . Note: shrink the size of sequence of dimension of token (for model's complexity reason)
                d_out: 32                ## default: 32, input dimension of encoder layer of Transformer
            independent_token:
                type: "FixedViewIndependentToken"
                args: None
            # independent_token:
            #     type: "NeuRayIndependentToken"
            #     args:
            #         n_points_per_ray: 64 # same as renderer.n_coarse
            attn_layers:
                IBRAttn: True           ## default: False // Note: customized IBRAttn tends to decrease the loss faster than built-in, but large memory consumption with customized transformer. built-in Pytorch is efficient.
                n_layers: 1             ## default: 3, num encoder layers from Transformer
                n_heads: 4
                readout_token:
                    type: "fixed"       # default: fixed,  fixed | data | neuray
            probing_layer:

            dropout_views_rate: 0.1     # default: 0.1, set 0 for disable and for knowledge-distillation
            dropout_multiviewhead: true # enforce encoder of multiviews to be dropped out, and keep the 1st encoder index not to be affected, so that to simulate different camera configurations with a varying number of input images during training. However, we want at least the first image to be consistently be present in the training. So no dropout for the first image. Dropout does not affect the single view head. 

        - type: "resnet"
          name: "singleviewhead"
          args:
            n_blocks : 0
            view_number: 0              # which encoder id we want to extract among feature maps
            d_hidden : 64

    final_prediction_head: "multiviewhead"

    encoding_style: "random"            # random | default | test : randomly sampling feature maps during training fisheye during training. BTS uses only mono as sampling. default: encoding indices include num multiview in order.
    ids_enc_offset_viz: [0]             # which cam to choose for inference of viz_eval. e.g. [0, 1 ...] or set "false" if you want to sample randomly (c.f. fisheye_offset)

    z_near: 3                           # default: 3(m)
    z_far: 80                           # default: 80(m)
    inv_z: true

    n_frames_encoder: 1
    n_frames_render: 2                  # num frame to render among given cameras at a frame: 4 x 2 => v==8
    frame_sample_mode: default          # defaut: default (for kitti-raw)| kitti360-mono | mono | stereo | only (for single image without temporal steps). Note: Make sure data_fisheye, data_stereo is set up accordingly.

    sample_mode: patch                  # e.g. a ray_batch_size of 4096, we sample 4096/64=64 patches.
    patch_size: 8                       # => 64 patches * (8 * 8) pixels / patch * 1 ray / pixel * 64 points / ray = 262144 points in the space in a single batch entry to be evaluated
    ray_batch_size: 2048                # default: 2048, 2048 in BTS paper #_sampled points in an array from one single view. Note: assert ray_batch_size % (self.patch_size_x * self.patch_size_y)
    flip_augmentation: true             # data augmentation
    ## TODO: Implement sample_type: Uniform | Hierarchical

    learn_empty: false
    code_mode: z                        # default: z, z | distance | z_feat: additional cam_feature_map_positional_encoding, Note: z_feat is unverified

loss:
    criterion: "l1+ssim"                # photometric reconstruction loss
    invalid_policy: weight_guided
    lambda_edge_aware_smoothness: 1e-3  # default: 1e-3 == 0.001
    lambda_pseudo_ground_truth: 0       # default: 1e-4, set 0 to disable. Note: This should be trained once the multiview head is trained enough to knowledge distillation for singleview head
    pseudo_ground_truth_teacher: "multiviewhead"
    pseudo_ground_truth_students:
        - "singleviewhead"              ## making list type with an string element contained

learning_rate: 5e-5                     # default: 1e-5 for fine-tuning. Note: 1e-4 for original BTS training from scratch, and last 20% is trained with 1e-5 c.f. BTS paper

scheduler:
    type: step
    step_size: 120000
    gamma: 0.1

## For distributed training
#backend = "nccl"  # Or "gloo"
#nproc_per_node: 2

IDE_debug:                              ## set true for remote IDE debug for pydevd_pycharm
    sv_: 58
    port_: 58023
